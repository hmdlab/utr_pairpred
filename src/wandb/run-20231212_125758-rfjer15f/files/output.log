Total sample size:16819
Loading embedding data ...
Successflly loaded embedding data !!!
Creating train dataset ...
train,13455
/home/ksuga/whole_mrna_predictor/UTR_PairPred/src/dataset.py:93: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  self.utr5emb = np.stack(list(np.array(self.seq_emb)[:, 0]))
/home/ksuga/whole_mrna_predictor/UTR_PairPred/src/dataset.py:93: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  self.utr5emb = np.stack(list(np.array(self.seq_emb)[:, 0]))
/home/ksuga/whole_mrna_predictor/UTR_PairPred/src/dataset.py:94: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  self.utr3emb = np.stack(list(np.array(self.seq_emb)[:, 1]))
/home/ksuga/whole_mrna_predictor/UTR_PairPred/src/dataset.py:94: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  self.utr3emb = np.stack(list(np.array(self.seq_emb)[:, 1]))
Creating val dataset ...
val,1682
Creating test dataset ...
test,3364

Epoch: 1: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 420/420 [00:05<00:00, 80.34it/s]
Traceback (most recent call last):
  File "trainer_contrastive_learning.py", line 354, in <module>
    main(opt)
  File "trainer_contrastive_learning.py", line 347, in main
    trainer.run()
  File "trainer_contrastive_learning.py", line 294, in run
    self.iterate(epoch, phase="train")
  File "trainer_contrastive_learning.py", line 240, in iterate
    self.scheduler.step()
TypeError: step() missing 1 required positional argument: 'epoch'